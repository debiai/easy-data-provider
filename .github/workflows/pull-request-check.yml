name: Pull Request Checks

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  black-format-check: # Check that the codebase is formatted with black
    name: Black format check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      - name: Install dependencies and check black format
        run: |
          python -m pip install --upgrade pip
          pip install black
          black --check --diff .

  flake8-check: # Check that the codebase does not contain linting errors
    name: Flake8 check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      - name: Install dependencies and check flake8 format
        run: |
          python -m pip install --upgrade pip
          pip install flake8
          flake8 .

  cspell-check: # Check that the codebase does not contain spelling errors
    name: CSpell check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: 18
      - name: Install dependencies and check prettier format
        run: npm install -g cspell && cspell --no-summary --no-progress --no-color .

  version-upgrade-check: # Check that the version is greater than the previous commit version
    name: Version upgrade check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get the branch version
        id: version-check
        run: |
          cd debiai_data_provider
          VERSION=$(cat version.py | grep -m1 VERSION | cut -d '=' -f 2 | sed 's/ //g'| tr -d '"')
          echo "BRANCH_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - uses: actions/checkout@v3
        with:
          ref: main

      - name: Check that the version is greater than the previous commit version
        run: |
          BRANCH_VERSION=${{ steps.version-check.outputs.BRANCH_VERSION }}
          cd debiai_data_provider
          PREVIOUS_VERSION=$(cat version.py | grep -m1 VERSION | cut -d '=' -f 2 | sed 's/ //g'| tr -d '"')

          echo "PREVIOUS_VERSION=$PREVIOUS_VERSION"
          echo "BRANCH_VERSION=$BRANCH_VERSION"

          # If pervious version is beta, ignore test
          if [[ $PREVIOUS_VERSION == *"beta"* ]]; then
            echo "Beta version detected, skipping version upgrade check."
            exit 0
          fi

          if [ "$BRANCH_VERSION" == "" ]; then
            echo "No version found in current branch."
            exit 1
          fi

          if [ "$PREVIOUS_VERSION" == "" ]; then
            echo "No version found in main branch."
            exit 1
          fi

          if [[ $PREVIOUS_VERSION == $BRANCH_VERSION ]]; then
            echo "Version not upgraded: frontend/package.json version '$PREVIOUS_VERSION' == branch version '$BRANCH_VERSION'."
            exit 1
          fi

          if [[ $PREVIOUS_VERSION > $BRANCH_VERSION ]]; then
            echo "Version not upgraded: frontend/package.json version '$PREVIOUS_VERSION' > branch version '$BRANCH_VERSION'."
            exit 1
          fi

          echo "Version upgraded: frontend/package.json version '$PREVIOUS_VERSION' < branch version '$BRANCH_VERSION'."

  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3.8
        uses: actions/setup-python@v1
        with:
          python-version: 3.10.16
      - name: Install dependencies and build
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
          pip install -r requirements.txt
          python setup.py sdist bdist_wheel
          python -m twine check dist/*

  python-tests:
    name: Python tests
    needs: [black-format-check, cspell-check, version-upgrade-check]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          pip install -r requirements.txt
      - name: Test with pytest
        run: |
          pytest --cov=debiai_data_provider --cov-report=xml --cov-report=html --cov-report=term-missing -sx tests/
